<Configurations>
  <Configuration topology="XM0" version="9.0 Initial Release" wrapper="PSTemplates\Sitecore9.ps1" scriptmaps="GLOBAL|INSTALL|UNINSTALL|VALIDATE">
    <File type="data" name="Sitecore 9.0.0 rev. 171002 (OnPrem)_cm.scwdp.zip" />
    <File type="config" name="sitecore-solr.json" />
    <File type="config" name="sitecore-XM1-cm.json" />
    <ScriptMaps>
      <ScriptMap location="GLOBAL">
        <![CDATA[
  $Prefix = '[PREFIX]'
  $PSScriptRoot = '[DATA_FOLDER]'
  $SolrUrl = '[SOLR_URL]'
  $SolrRoot = '[SOLR_ROOT]'
  $SolrService = '[SOLR_SERVICE]'
  $SqlServer = '[SQL_SERVER]'
  $SqlAdminUser = '[SQL_USER]'
  $SqlAdminPassword = '[SQL_PASSWORD]'
  $LicenseFilePath = '[LICENSE_FILE]'
  $SiteName = '[SITENAME]'
  $SiteFolder = "C:\inetpub\wwwroot\$SiteName" 
  $SecurePassword = 'Sitecor3SecureP4ssword!'
      ]]>
      </ScriptMap>
      <ScriptMap location="INSTALL">
        <![CDATA[
  $solrParams = @{
      Path = "$PSScriptRoot\sitecore-solr.json"
      SolrUrl = $SolrUrl
      SolrRoot = $SolrRoot
      SolrService = $SolrService
      CorePrefix = $Prefix
    }
    Install-SitecoreConfiguration @solrParams
     
  $sitecoreParams = @{
      Path = "$PSScriptRoot\sitecore-XM1-cm.json"
      Package = "$PSScriptRoot\Sitecore 9.0.0 rev. 171002 (OnPrem)_cm.scwdp.zip"
      LicenseFile = $LicenseFilePath
      SqlDbPrefix = $Prefix
      SolrCorePrefix = $Prefix
      SolrUrl = $SolrUrl
      SiteName = $SiteName
      SqlServer = $SqlServer
      SqlAdminPassword = $SqlAdminPassword
      SqlAdminUser = $SqlAdminUser
      SqlCorePassword = $SecurePassword
      SqlMasterPassword = $SecurePassword
      SqlFormsPassword = $SecurePassword
      SqlWebPassword = $SecurePassword
    }
    Install-SitecoreConfiguration @sitecoreParams
    
     Write-Host "Setting XM0 Role to Standalone"
     $webConfigPath = "$SiteFolder\web.config"
     ((Get-Content -path $webConfigPath -Raw) -replace '<add key="role:define" value="ContentManagement" />','<add key="role:define" value="Standalone" />') | Set-Content -Path $webConfigPath
      ]]>
      </ScriptMap>
      <ScriptMap location="UNINSTALL">
        <![CDATA[
  RemoveSolrCores
  
  RemoveDatabase("Core")
  RemoveDatabase("ExperienceForms")
  RemoveDatabase("Master")
  RemoveDatabase("Web")

  RemoveWebsite($SiteName)
  
  RemoveFolder($SiteFolder)
        ]]>
      </ScriptMap>
      <ScriptMap location="VALIDATE">
        <![CDATA[
         #Check Solr Service Status
    $service = Get-Service -Name $SolrService
    
    if($service.Status -ne "Running")
    {
      throw "Solr service '$SolrService' is not running. Current state is '$($service.Status)'"
    }

    #Check Solr Version
    $solrVerClient = (New-Object System.Net.WebClient)
    [xml]$solrAdminResp = $solrVerClient.DownloadString("$SolrUrl/admin/info/system") 
    $solrVersion =  select-xml -xml $solrAdminResp -xpath "//str[@name='solr-spec-version']/text()" | % { $_.Node.Value }
    
    if($solrVersion -ne "6.6.2" -and $solrVersion -ne "6.6.3"){
      throw "Invalid solr version '$solrVersion'."
    }
    
    #Check Solr Folder
    if(!(Test-Path $SolrRoot))
    {
      throw "Solr Folder doesn't exist at '$SolrRoot'"
    }

    
    #Check Solr Folder config sets for _default
    $configSetPath = "$SolrRoot\server\solr\configsets\basic_configs"
    if(!(Test-Path $configSetPath))
    {
      throw "Solr Configsets Folder doesn't exist at '$configSetPath'"
    }

    #Check for our license file
    if(!(Test-Path $LicenseFilePath))
    {
      throw "License File doesn't exist at '$LicenseFilePath'"
    }

    #Check Login
    Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT GETDATE()" -ErrorAction Stop | Out-Null

    #Check our SQL version
    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | out-null
    $sqlServerSmo = New-Object "Microsoft.SqlServer.Management.Smo.Server" $SqlServer
    $sqlVersion = $sqlServerSmo.Version.Major
    $sqlBuild = $sqlServerSmo.Version.Build

    #Check for 2016
    if($sqlVersion -ne 13){
      throw "Invalid SQL Server Version"
    }

    #if 2016, we need at least SP2 installed
    if($sqlBuild -ge 5026 -and !$IgnoreSQL2016SP2){
      throw "SQL Server 2016 must have SP1 installed.  If you want to install anyway, run with '-IgnoreSQL2016SP2'"
      }

      #Finally check if they can actually create DBs or not. It helps.
      $canCreateDBs = (Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT has_perms_by_name(null, null, 'CREATE ANY DATABASE') AS DBPerm") | Select -expand DBPerm
      
      if($canCreateDBs -ne "1"){
        throw "Specified SQL user does not have DB Creation permissions"
      }
        ]]>
      </ScriptMap>
    </ScriptMaps>
    <Fields>
      <Field name="sitename" type="text" map="SITENAME" label="Site Name" description="The Name of the Website"  defaultValue="[[PREFIX]].sc"/>
    </Fields>
  </Configuration>
  <Configuration topology="XM1" version="9.0 Initial Release" wrapper="PSTemplates\Sitecore9.ps1" scriptmaps="GLOBAL|INSTALL|UNINSTALL|VALIDATE">
    <File type="data" name="Sitecore 9.0.0 rev. 171002 (OnPrem)_cm.scwdp.zip" />
    <File type="data" name="Sitecore 9.0.0 rev. 171002 (OnPrem)_cd.scwdp.zip" />
    <File type="config" name="sitecore-solr.json" />
    <File type="config" name="sitecore-XM1-cm.json" />
    <File type="config" name="sitecore-XM1-cd.json" />
    <ScriptMaps>
      <ScriptMap location="GLOBAL">
        <![CDATA[
$Prefix = '[PREFIX]'
$PSScriptRoot = '[DATA_FOLDER]'
$SolrUrl = '[SOLR_URL]'
$SolrRoot = '[SOLR_ROOT]'
$SolrService = '[SOLR_SERVICE]'
$SqlServer = '[SQL_SERVER]'
$SqlAdminUser = '[SQL_USER]'
$SqlAdminPassword = '[SQL_PASSWORD]'
$LicenseFilePath = '[LICENSE_FILE]'
$CMSiteName = '[CM_SITENAME]'
$CDSiteName = '[CD_SITENAME]'
$CMSiteFolder = "C:\inetpub\wwwroot\$CMSiteName"    
$CDSiteFolder = "C:\inetpub\wwwroot\$CDSiteName"    
$SecurePassword = 'Sitecor3SecureP4ssword!'
      ]]>
      </ScriptMap>
      <ScriptMap location="INSTALL">
        <![CDATA[
  $solrParams = @{
      Path = "$PSScriptRoot\sitecore-solr.json"
      SolrUrl = $SolrUrl
      SolrRoot = $SolrRoot
      SolrService = $SolrService
      CorePrefix = $Prefix
    }
    Install-SitecoreConfiguration @solrParams
    
  $sitecore_cm_Params = @{
      Path = "$PSScriptRoot\sitecore-XM1-cm.json"
      Package = "$PSScriptRoot\Sitecore 9.0.0 rev. 171002 (OnPrem)_cm.scwdp.zip"
      LicenseFile = $LicenseFilePath
      SqlDbPrefix = $Prefix
      SolrCorePrefix = $Prefix
      SolrUrl = $SolrUrl
      SiteName = $CMSiteName
      SqlServer = $SqlServer
      SqlAdminPassword = $SqlAdminPassword
      SqlAdminUser = $SqlAdminUser
      SqlCorePassword = $SecurePassword
      SqlMasterPassword = $SecurePassword
      SqlFormsPassword = $SecurePassword
      SqlWebPassword = $SecurePassword
    }
    Install-SitecoreConfiguration @sitecore_cm_Params
    
  $sitecore_cd_Params = @{
      Path = "$PSScriptRoot\sitecore-XM1-cd.json"
      Package = "$PSScriptRoot\Sitecore 9.0.0 rev. 171002 (OnPrem)_cd.scwdp.zip"
      LicenseFile = $LicenseFilePath
      SqlDbPrefix = $Prefix
      SolrCorePrefix = $Prefix
      SolrUrl = $SolrUrl
      SiteName = $CDSiteName
      SqlServer = $SqlServer
      SqlCorePassword = $SecurePassword
      SqlFormsPassword = $SecurePassword
      SqlWebPassword = $SecurePassword
    }
    Install-SitecoreConfiguration @sitecore_cd_Params
        ]]>
      </ScriptMap>
      <ScriptMap location="UNINSTALL">
        <![CDATA[
    RemoveSolrCores
  
    RemoveDatabase("Core")
    RemoveDatabase("ExperienceForms")
    RemoveDatabase("Master")
    RemoveDatabase("Web")
    
    RemoveWebsite($CMSiteName)
    RemoveWebsite($CDSiteName)
    
    RemoveFolder($CMSiteFolder)
    RemoveFolder($CDSiteFolder)
  ]]>
      </ScriptMap>
      <ScriptMap location="VALIDATE">
        <![CDATA[
         #Check Solr Service Status
    $service = Get-Service -Name $SolrService
    
    if($service.Status -ne "Running")
    {
      throw "Solr service '$SolrService' is not running. Current state is '$($service.Status)'"
    }

    #Check Solr Version
    $solrVerClient = (New-Object System.Net.WebClient)
    [xml]$solrAdminResp = $solrVerClient.DownloadString("$SolrUrl/admin/info/system") 
    $solrVersion =  select-xml -xml $xml -xpath "//str[@name='solr-spec-version']/text()" | % { $_.Node.Value }
    
    if($solrVersion -ne "6.6.2" -and $solrVersion -ne "6.6.3"){
      throw "Invalid solr version '$solrVersion'."
    }
    
    #Check Solr Folder
    if(!(Test-Path $SolrRoot))
    {
      throw "Solr Folder doesn't exist at '$SolrRoot'"
    }

    
    #Check Solr Folder config sets for _default
    $configSetPath = "$SolrRoot\server\solr\configsets\basic_configs"
    if(!(Test-Path $configSetPath))
    {
      throw "Solr Configsets Folder doesn't exist at '$configSetPath'"
    }

    #Check for our license file
    if(!(Test-Path $LicenseFilePath))
    {
      throw "License File doesn't exist at '$LicenseFilePath'"
    }

    #Check Login
    Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT GETDATE()" -ErrorAction Stop | Out-Null

    #Check our SQL version
    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | out-null
    $sqlServerSmo = New-Object "Microsoft.SqlServer.Management.Smo.Server" $SqlServer
    $sqlVersion = $sqlServerSmo.Version.Major
    $sqlBuild = $sqlServerSmo.Version.Build

    #Check for 2016
    if($sqlVersion -ne 13){
      throw "Invalid SQL Server Version"
    }

    #if 2016, we need at least SP2 installed
    if($sqlBuild -ge 5026 -and !$IgnoreSQL2016SP2){
      throw "SQL Server 2016 must have SP1 installed.  If you want to install anyway, run with '-IgnoreSQL2016SP2'"
      }

      #Finally check if they can actually create DBs or not. It helps.
      $canCreateDBs = (Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT has_perms_by_name(null, null, 'CREATE ANY DATABASE') AS DBPerm") | Select -expand DBPerm
      
      if($canCreateDBs -ne "1"){
        throw "Specified SQL user does not have DB Creation permissions"
      }
        ]]>
      </ScriptMap>
    </ScriptMaps>
    <Fields>
      <Field name="cm_sitename" type="text" map="CM_SITENAME" label="CM Site Name" description="The Name of the CM Website"  defaultValue="[[PREFIX]].sc-cm"/>
      <Field name="cd_sitename" type="text" map="CD_SITENAME" label="CD Site Name" description="The Name of the CD Website"  defaultValue="[[PREFIX]].sc-cd"/>
    </Fields>
  </Configuration>
  <Configuration topology="XP0" version="9.0 Initial Release" wrapper="PSTemplates\Sitecore9.ps1" scriptmaps="GLOBAL|INSTALL|UNINSTALL|VALIDATE">
    <File type="data" name="Sitecore 9.0.0 rev. 171002 (OnPrem)_single.scwdp.zip" />
    <File type="data" name="Sitecore 9.0.0 rev. 171002 (OnPrem)_xp0xconnect.scwdp.zip" />
    <File type="config" name="xconnect-createcert.json" />
    <File type="config" name="xconnect-solr.json"/>
    <File type="config" name="sitecore-solr.json" />
    <File type="config" name="xconnect-xp0.json" />
    <File type="config" name="sitecore-XP0.json" />
    <ScriptMaps>
      <ScriptMap location="GLOBAL">
        <![CDATA[
$Prefix = '[PREFIX]'
$PSScriptRoot = '[DATA_FOLDER]'
$SolrUrl = '[SOLR_URL]'
$SolrRoot = '[SOLR_ROOT]'
$SolrService = '[SOLR_SERVICE]'
$SqlServer = '[SQL_SERVER]'
$SqlAdminUser = '[SQL_USER]'
$SqlAdminPassword = '[SQL_PASSWORD]'
$LicenseFilePath = '[LICENSE_FILE]'
$xConnectCertName = "$Prefix.xconnect_client"
$xConnectSiteName = '[XCONNECT_SITE]'
$SiteName = '[SITENAME]'
$SiteFolder = "C:\inetpub\wwwroot\$SiteName"      
$xConnectSiteFolder = "C:\inetpub\wwwroot\$xConnectSiteName"    
$SecurePassword = 'Sitecor3SecureP4ssword!'
      ]]>
      </ScriptMap>
      <ScriptMap location="INSTALL">
        <![CDATA[
  $certParams = @{
    Path = "$PSScriptRoot\xconnect-createcert.json"
    CertificateName = $xConnectCertName 
  }
  Install-SitecoreConfiguration @certParams -Verbose
    
  $solrParams = @{
    Path = "$PSScriptRoot\xconnect-solr.json"
    SolrUrl = $SolrUrl
    SolrRoot = $SolrRoot
    SolrService = $SolrService
    CorePrefix = $Prefix
  }
  Install-SitecoreConfiguration @solrParams
  
  $xconnectParams = @{
    Path = "$PSScriptRoot\xconnect-xp0.json"
    Package = "$PSScriptRoot\Sitecore 9.0.0 rev. 171002 (OnPrem)_xp0xconnect.scwdp.zip"
    LicenseFile = $LicenseFilePath
    Sitename = $xConnectSiteName
    XConnectCert = $xConnectCertName 
    SqlDbPrefix = $Prefix
    SqlServer = $SqlServer
    SqlAdminUser = $SqlAdminUser
    SqlAdminPassword = $SqlAdminPassword
    SolrCorePrefix = $Prefix
    SolrURL = $SolrUrl
    SqlCollectionPassword = $SecurePassword
    SqlProcessingPoolsPassword = $SecurePassword
    SqlReferenceDataPassword = $SecurePassword
    SqlMarketingAutomationPassword = $SecurePassword
  }
  Install-SitecoreConfiguration @xconnectParams
  
  $solrParams = @{
    Path = "$PSScriptRoot\sitecore-solr.json"
    SolrUrl = $SolrUrl
    SolrRoot = $SolrRoot
    SolrService = $SolrService
    CorePrefix = $Prefix
  }
  Install-SitecoreConfiguration @solrParams
    
  $sitecoreParams = @{
    Path = "$PSScriptRoot\sitecore-XP0.json"
    Package = "$PSScriptRoot\Sitecore 9.0.0 rev. 171002 (OnPrem)_single.scwdp.zip"
    LicenseFile = $LicenseFilePath
    Sitename = $SiteName
    XConnectCert = $xConnectCertName 
    SqlDbPrefix = $Prefix
    SqlServer = $SqlServer
    SqlAdminUser = $SqlAdminUser
    SqlAdminPassword = $SqlAdminPassword
    SolrCorePrefix = $Prefix
    SolrURL = $SolrUrl
    SqlCorePassword = $SecurePassword
    SqlMasterPassword = $SecurePassword
    SqlWebPassword = $SecurePassword
    SqlReportingPassword = $SecurePassword
    SqlProcessingPoolsPassword = $SecurePassword
    SqlProcessingTasksPassword = $SecurePassword
    SqlReferenceDataPassword = $SecurePassword
    SqlMarketingAutomationPassword = $SecurePassword
    SqlFormsPassword = $SecurePassword
    XConnectCollectionService = "https://$xConnectSiteName"
  }
  Install-SitecoreConfiguration @sitecoreParams
  
  
  Write-Host "Enabling SSL on Site"
  Invoke-AddWebFeatureSSLTask -Hostname $SitecoreSiteName -SiteName $SitecoreSiteName -Port 443 -ClientCertLocation LocalMachine -OutputDirectory "C:\certificates" -RootDnsName "DO_NOT_TRUST_SitecoreRootCert" -RootCertName "root-authority"
  Remove-WebBinding -Port 80 -HostHeader $SitecoreSiteName
        ]]>
      </ScriptMap>
      <ScriptMap location="UNINSTALL">
        <![CDATA[
     
  RemoveService("$xConnectSiteName-MarketingAutomationService")
  RemoveService("$xConnectSiteName-IndexWorker")
  
  RemoveSolrCores
  
  RemoveDatabase("Core")
  RemoveDatabase("EXM.Master")
  RemoveDatabase("ExperienceForms")
  RemoveDatabase("MarketingAutomation")
  RemoveDatabase("Master")
  RemoveDatabase("Messaging")
  RemoveDatabase("Processing.Pools")
  RemoveDatabase("Processing.Tasks")
  RemoveDatabase("ReferenceData")
  RemoveDatabase("Reporting")
  RemoveDatabase("Web")
  RemoveDatabase("Xdb.Collection.Shard0")
  RemoveDatabase("Xdb.Collection.Shard1")
  RemoveDatabase("Xdb.Collection.ShardMapManager")
  
  RemoveWebsite($xConnectSiteName)
  RemoveWebsite($SiteName)   
  
  RemoveFolder($SiteFolder)
  RemoveFolder($xConnectSiteFolder)   
        ]]>
      </ScriptMap>
      <ScriptMap location="VALIDATE">
        <![CDATA[
         #Check Solr Service Status
    $service = Get-Service -Name $SolrService
    
    if($service.Status -ne "Running")
    {
      throw "Solr service '$SolrService' is not running. Current state is '$($service.Status)'"
    }

    #Check Solr Version
    $solrVerClient = (New-Object System.Net.WebClient)
    [xml]$solrAdminResp = $solrVerClient.DownloadString("$SolrUrl/admin/info/system") 
    $solrVersion =  select-xml -xml $xml -xpath "//str[@name='solr-spec-version']/text()" | % { $_.Node.Value }
    
    if($solrVersion -ne "6.6.2" -and $solrVersion -ne "6.6.3"){
      throw "Invalid solr version '$solrVersion'."
    }
    
    #Check Solr Folder
    if(!(Test-Path $SolrRoot))
    {
      throw "Solr Folder doesn't exist at '$SolrRoot'"
    }

    
    #Check Solr Folder config sets for _default
    $configSetPath = "$SolrRoot\server\solr\configsets\basic_configs"
    if(!(Test-Path $configSetPath))
    {
      throw "Solr Configsets Folder doesn't exist at '$configSetPath'"
    }

    #Check for our license file
    if(!(Test-Path $LicenseFilePath))
    {
      throw "License File doesn't exist at '$LicenseFilePath'"
    }

    #Check Login
    Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT GETDATE()" -ErrorAction Stop | Out-Null

    #Check our SQL version
    [reflection.assembly]::LoadWithPartialName("Microsoft.SqlServer.Smo") | out-null
    $sqlServerSmo = New-Object "Microsoft.SqlServer.Management.Smo.Server" $SqlServer
    $sqlVersion = $sqlServerSmo.Version.Major
    $sqlBuild = $sqlServerSmo.Version.Build

    #Check for 2016
    if($sqlVersion -ne 13){
      throw "Invalid SQL Server Version"
    }

    #if 2016, we need at least SP2 installed
    if($sqlBuild -ge 5026 -and !$IgnoreSQL2016SP2){
      throw "SQL Server 2016 must have SP1 installed.  If you want to install anyway, run with '-IgnoreSQL2016SP2'"
      }

      #Finally check if they can actually create DBs or not. It helps.
      $canCreateDBs = (Invoke-SQLCmd -ServerInstance $SqlServer -U $SqlAdminUser -P $SqlAdminPassword -Query "SELECT has_perms_by_name(null, null, 'CREATE ANY DATABASE') AS DBPerm") | Select -expand DBPerm
      
      if($canCreateDBs -ne "1"){
        throw "Specified SQL user does not have DB Creation permissions"
      }
        ]]>
      </ScriptMap>
    </ScriptMaps>
    <Fields>
      <Field name="xconnectsitename" type="text" map="XCONNECT_SITE" label="X Connect Site Name" description="The Name of the xConnect Website"  defaultValue="[[PREFIX]].xconnect"/>
      <Field name="sitename" type="text" map="SITENAME" label="Site Name" description="The Name of the Website"  defaultValue="[[PREFIX]].sc"/>
    </Fields>
  </Configuration>
</Configurations>
